# Get the current directory
mac_mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
$(info $$mac_mkfile_path is [${mac_mkfile_path}])
mac_current_dir := $(notdir $(patsubst %/,%,$(dir $(mac_mkfile_path))))
$(info $$mac_current_dir is [${mac_current_dir}])

# Flags
CFLAGS += -I$(mac_current_dir)/include -I$(mac_current_dir)/include/testsinclude

MKDIR_OBJ_MAC = mkdir -p $(mac_current_dir)/obj
MKDIR_LIB_MAC = mkdir -p $(mac_current_dir)/lib

LIB_MAC = $(mac_current_dir)/lib

# include directories
INC_DIR = $(mac_current_dir)/include
$(info $$INC_DIR is [${INC_DIR}])

ifdef TEST
INCT_DIR = $(INC_DIR)/testsinclude
$(info $$INCT_DIR is [${INCT_DIR}])
endif

# source directories
SRC_DIR = $(mac_current_dir)
$(info $$SRC_DIR is [${SRC_DIR}])

ifdef TEST
SRCT_DIR = $(mac_current_dir)/srcs_test
$(info $$SRCT_DIR is [${SRCT_DIR}])
endif

# Source files
SRCA = CFPacket.c ControlPacket.c DataPacket.c MAC_Internals.c MCLMAC.c MAC_PowerMode_StateMachine.c
SRCA += Packets_Handlers.c MAC_StateMachine.c
SRC = $(addprefix $(mac_current_dir)/, $(SRCA))
$(info $$SRC is [${SRC}])

ifdef TEST
SRCTA = mclmac_tests.c CFPacket_Tests.c ControlPacket_Tests.c DataPacket_Tests.c MAC_Internals_Tests.c
SRCTA += MCLMAC_Tests.c MAC_PowerMode_StateMachine_Tests.c Packets_Handlers_Tests.c MAC_StateMachine_Tests.c
SRCT+= $(addprefix $(SRCT_DIR)/, $(SRCTA))
$(info $$SRCT is [${SRCT}])
endif

# Dependencies
DEPSA = CFPacket.h ControlPacket.h DataPacket.h MAC_Internals.h MCLMAC.h config_mac.h
DEPS = $(INC_UTILS)/memory_macros.h
DEPS += $(addprefix $(INC_DIR)/, $(DEPSA))

ifdef TEST
DEPSTA = mclmac_tests.h CFPacket_Tests.h DataPacket_Tests.h MAC_Internals_Tests.h MCLMAC_Tests.h 
DEPSTA += MAC_PowerMode_StateMachine_Tests.h Packets_Handlers_Tests.h MAC_StateMachine_Tests.h
DEPST = $(addprefix $(INCT_DIR)/, $(DEPSTA))
endif
$(info $$DEPS is [${DEPS}])

# Objects
OBJ_DIR = $(mac_current_dir)/obj
$(info $$OBJ_DIR is ${OBJ_DIR})
ifdef TEST
OBJT_DIR = $(mac_current_dir)/obj
$(info $$OBJT_DIR is ${OBJT_DIR})
endif

OBJA = CFPacket.o ControlPacket.o DataPacket.o MAC_Internals.o MCLMAC.o MAC_PowerMode_StateMachine.o
OBJA += Packets_Handlers.o MAC_StateMachine.o
OBJS = $(addprefix $(OBJ_DIR)/, $(OBJA))
$(info $$OBJS is ${OBJS})

ifdef TEST
OBJSTA = mclmac_tests.o CFPacket_Tests.o ControlPacket_Tests.o DataPacket_Tests.o MAC_Internals_Tests.o
OBJSTA += MCLMAC_Tests.o MAC_PowerMode_StateMachine_Tests.o Packets_Handlers_Tests.o MAC_StateMachine_Tests.o
OBJST = $(addprefix $(OBJT_DIR)/, $(OBJSTA))
$(info $$OBJST is ${OBJST})
endif

TARGETS := directories_mac $(LIB_MAC)/libmclmac
ifdef TEST
TARGETS += $(LIB_MAC)/libmclmacT
endif
$(info $$TARGETS is [${TARGETS}])

all: $(TARGETS)

directories_mac:
	$(MKDIR_OBJ_MAC)
	$(MKDIR_LIB_MAC)

# Create a static library for the current module
$(LIB_MAC)/libmclmac: $(OBJS)
	$(AR) $@.a $^
	$(RL) $@.a

ifdef TEST
$(LIB_MAC)/libmclmacT: $(OBJST)
	$(AR) $@.a $^
	$(RL) $@.a
endif

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $< -o $@

$(OBJ_DIR)/%.o: $(current_dir)/utils/include/%.h $(INC_DIR)/%.h

ifdef TEST
$(OBJT_DIR)/%.o: $(SRCT_DIR)/%.c
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $< -o $@

$(OBJT_DIR)/%.o: $(INCT_DIR)/%.h
endif
